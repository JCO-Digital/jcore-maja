{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JCORE\u00ae Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>JCORE\u00ae is a WordPress framework created by the developers at J&amp;Co Digital. The framework covers WordPress web site development workflow all the way from the local development to the production deployment.</p> <p>An essential part of the framework is the WordPress theme - JCORE\u00ae. The theme is a collection of best practices and tools for WordPress development.</p> <p>Since version 3 all parts of JCORE are opensource and publicly available.</p> <p>The purpose of JCORE\u00ae is to enhance the developer experience and the quality of work.</p>"},{"location":"#cocktail-branch-names","title":"Cocktail branch names","text":"<ul> <li>aviation</li> <li>bellini</li> <li>cosmopolitan</li> <li>daiquiri</li> <li>elduelo</li> <li>fluffycritter</li> <li>grasshopper</li> <li>gintonic</li> <li>hurricane</li> <li>irishcoffee</li> <li>johncollins</li> <li>kirroyale</li> <li>longislandicedtea</li> <li>margarita</li> <li>negroni</li> <li>oldfashioned</li> <li>pinacolada</li> <li>ramosfizz</li> <li>sexonthebeach</li> <li>tequilasunrise</li> <li>vesper</li> <li>whitelady</li> <li>zombie</li> </ul>"},{"location":"ci_setup_spinupwp/","title":"JCORE\u00ae CI setup for SpinupWP","text":""},{"location":"ci_setup_spinupwp/#1-add-new-spinupwp-site","title":"1. Add new SpinupWP site","text":""},{"location":"ci_setup_spinupwp/#domain-name","title":"Domain name","text":"<p>Example projectname.vc.bojaco.com. Each server has wildcard domain name that works without DNS configurations.</p>"},{"location":"ci_setup_spinupwp/#installation","title":"Installation","text":"<p>Change admin email to support@jco.fi. Use projectname as admin username. Store username and password to Bitwarden right away.</p> <p>On the database page save database prefix to your notes - you will need it later. You will also need siteuser and server so it is good to include them in you notes at this point aswell.</p> <p>When install has finished building go to SFTP &amp; SSH page and activate GitHub SSH key and your own key(s) from the list. You can also check known other project team members keys at this point to make things smoother.</p>"},{"location":"ci_setup_spinupwp/#2-create-github-repository","title":"2. Create Github repository","text":"<p>If possible use projectname as reporsitory name. Make private repository and choose not to generate .gitignore (use template none).</p>"},{"location":"ci_setup_spinupwp/#3-create-jcore-project-using-jcore-cli","title":"3. Create JCORE project using JCORE\u00ae CLI","text":"<p>Login to terminal and goto your projects folder.</p> <p>run <code>jcore init &lt;projectname&gt;</code></p> <p>Go to newly created project dir: <code>cd &lt;projectname&gt;</code></p> <p>run <code>make install</code></p> <p>If you get error related to vendor/composer, check vendor dir permissions: <code>chown &lt;username&gt;:&lt;username&gt; vendor</code></p>"},{"location":"ci_setup_spinupwp/#4-setup-ci-connection-parameters","title":"4. Setup CI connection parameters","text":"<p>Now lets hope you made notes at step one.</p> <p>jcore.toml</p> <pre><code>projectName = \"projectname\"\ntemplate = \"jcore2\"\nlocalDomain = \"projectname.localhost\"\ndomains = [ \"projectname.localhost\" ]\nbranch = \"grasshopper\"\ntheme = \"projectname\"\nremoteDomain = \"projectname.wf.bojaco.com\"\nremoteHost = \"siteuser@server\"\nremotePath = \"/sites/projectname.wf.bojaco.com/files\"\nreplace = [ \"//projectname.wf.bojaco.com|//projectname.localhost\" ]\npluginInstall = \"composer\"\ndbPrefix = \"xxx_\"\n</code></pre> <p>.github/workflows/deploy.yml</p> <pre><code>name: Deploy site\n\non:\npush:\n    branch:\n    - main\n\njobs:\nbuild:\n    uses: jco-digital/deploy-wp-action/.github/workflows/build-project.yml@v2.0.1\n    with:\n    is_jcore2: true\n    php_version: 8.2\n    slack_channel: C07C91377D4\n    secrets: inherit\ndeploy:\n    needs: [build]\n    uses: jco-digital/deploy-wp-action/.github/workflows/server-deploy.yml@v2.0.0\n    with:\n    server_url: siteuser@server\n    base_path: /sites/projectname.wf.bojaco.com/files\n    paths: &gt;-\n        wp-content/themes/projectname/:wp-content/themes/projectname/,\n        wp-content/themes/jcore2/:wp-content/themes/jcore2/,\n        wp-content/plugins/:wp-content/plugins/,\n        vendor/:vendor/\n    known_hosts: ${{ vars.VC_HOSTS }}\n    slack_channel: C07C91377D4\n    secrets: inherit\n</code></pre> <p>Get Slack channel ID by right-clicking on channel -&gt; show channel details. Add Buildbot 9000 app to this channel in slack.</p> <p>If your project has no slack channel yet, you can leave this as it is and join #devnull channel.</p>"},{"location":"ci_setup_spinupwp/#5-make-initial-commit","title":"5. Make initial commit","text":""},{"location":"ci_setup_spinupwp/#connect-local-repository-to-github-remote","title":"Connect local repository to Github remote","text":"<p>Copy and run add remote command from Github:</p> <p><code>git remote add origin git@github.com:JCO-Digital/projectname.git</code></p> <p>Commit your changes and push. You should now see build process results in the slack channel. If build fails, you can see details in the GitHub repository's Action tab.</p>"},{"location":"ci_setup_spinupwp/#6-finalize-setup","title":"6. Finalize setup","text":""},{"location":"ci_setup_spinupwp/#login-to-wp-admin-panel-at-spinupwp","title":"Login to WP admin panel at SpinupWP","text":"<p>At this point you should have login credidentials stored to Bitwarden. If not, do it now. Make sure the dev URL and the localhost URL are set up correctly in Bitwarden record. Finally move Bitwarden record to JCO organzation. You can use WP Admin Medium collection if other security level has not been agreed.</p>"},{"location":"ci_setup_spinupwp/#go-through-initial-wp-setup","title":"Go through initial WP setup","text":"<ul> <li>set active theme to projectname</li> <li>set timezone to Helsinki (usually)</li> <li>set date format: d.m.Y</li> <li>set time format: H:i</li> </ul>"},{"location":"ci_setup_spinupwp/#7-run-project-locally","title":"7. Run project locally","text":""},{"location":"ci_setup_spinupwp/#run-local-host-and-pull","title":"Run local host and pull","text":"<p>If on Windows, make sure you have Docker running. Go to your local project directory and run <code>jcore start</code></p> <p>Update you local WordPress setup to match server by running <code>jcore pull</code></p> <p>After update is finished run <code>make watch</code></p> <p>Enjoy coding!</p>"},{"location":"cli/","title":"JCORE\u00ae CLI","text":"<p>JCORE\u00ae CLI is used to create and manage local development environments for JCORE\u00ae projects. It's written in TypeScript and requires Node.js to run.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>On Windows, even though JCORE\u00ae CLI should work from any shell, you should install it inside WSL. This is because the whole environment needs to be run from WSL, or it will be painfully slow.</p> <p>Copy the file to somewhere in your PATH. If you install it globally, it needs to be updated with <code>sudo</code> (<code>sudo jcore update self</code>), but should otherwise work. It is recommended to install it in your home folder. The <code>~bin</code> folder might need to be added to the path, but most distros should have this done automatically if it exists. This requires restarting your shell after creating the folder.</p> <p>You can install it by running the following commands:</p> <pre><code>mkdir ~/bin\ncurl -o ~/bin/jcore https://github.com/JCO-Digital/jcore-cli/releases/latest/download/jcore\nchmod 755 ~/bin/jcore\n</code></pre> <p>If you want to install it globally you can do that by running:</p> <pre><code>sudo curl -o /usr/local/bin/jcore https://github.com/JCO-Digital/jcore-cli/releases/latest/download/jcore\nsudo chmod 755 /usr/local/bin/jcore\n</code></pre>"},{"location":"cli/#migrating-older-projects","title":"Migrating older projects","text":"<p>From version 3.2 forward JCORE-CLI will not run projects that don't use the jcore.toml settings format. In this situation you can run <code>jcore migrate</code> to update the project to the new format. This should be relatively automatic, but might require some manual intervention.</p> <p>When migrating, CLI will attempt to convert the old <code>config.sh</code> file to the new <code>jcore.toml</code> format. It also requires the new format <code>docker-compose.yml</code> in order for the container to read the settings.</p>"},{"location":"cli/#packagejson","title":"package.json","text":"<p>The <code>package.json</code> file is not overwritten, unless the file checksum matches, which in turn requires a fairly new project. If you want to update to using the new build system, run <code>jcore update package.json</code> to overwrite <code>package.json</code>. The migrate script will add <code>smol-toml</code> as a dependency if it deems it at all necessary. This is not required for old style gulp projects.</p>"},{"location":"cli/#usage","title":"Usage","text":"<pre><code>Usage: jcore &lt;command&gt; [options] &lt;target&gt;\n\nPossible commands:\nattach           - Attach to the logs of all containers\nchecksum         - Manages file checksums.\nchild            - Makes project child theme by copying the local jcore2-child folder.\nclean            - Delete image / container / temp files.\nclone            - Clones a project from bitbucket, and sets everything up.\ndoctor           - Checks the status of the environment.\ninit             - Creates a new project in the &lt;target&gt; folder.\npull             - Syncs content from upstream.\nrun              - Runs a command in container.\nconfig           - Set options in config file. Currently mode/debug.\nshell            - Opens a shell in the container / VM.\nstatus           - Shows information about running projects.\nstart            - Installs composer and npm dependencies, and starts container.\nstop             - Shutdown container. Removes docker\nupdate           - Updates project. If the target is 'self' this script updates itself.\n\nPossible options:\n--branch / -b    - Set the JCORE branch to use, used in the init command.\n--force / -f     - Overwrites existing files.\n--global / -g    - Write settings globally.\n--help / -h      - This info.\n--install / -i   - Installs node modules even if they are already installed.\n--local / -l     - Write settings locally.\n--nochild / -n   - Doesn't install child theme on init command.\n--quiet / -q     - Print only errors.\n--template / -t  - Set template to use.\n--verbose / -v   - Print more text.\n--debug / -d     - Print everything.\n--loglevel / -p  - Set numeric log level.\n</code></pre>"},{"location":"cli/#commands","title":"Commands","text":""},{"location":"cli/#attach","title":"attach","text":"<p>Attach to the logs of all containers.</p>"},{"location":"cli/#checksum","title":"checksum","text":"<p>Manages file checksums. This is used to check which files have been changed manually, and should not be overwritten automatically. You can list all existing checksums, and reset checksums for specific files.</p>"},{"location":"cli/#child","title":"child","text":"<p>Makes project child theme by copying the local jcore2-child folder. It uses a file copy operation, rather than checking out the git repository, so uncommitted files in the folder will be included. The default name will be the same as the project name, but a different name can be specified as the target.</p>"},{"location":"cli/#clean","title":"clean","text":"<p>Delete image / container / temp files.</p>"},{"location":"cli/#clone","title":"clone","text":"<p>Clones a project from bitbucket, and sets everything up. This does a <code>git clone</code>, but also some basic project file checks and setup.</p>"},{"location":"cli/#doctor","title":"doctor","text":"<p>Checks the status of the environment.</p>"},{"location":"cli/#init","title":"init","text":"<p>Creates a new project in the  folder. This command creates a sub-folder with the name you specify and copies all the needed files into it. It also sets up needed config files, initializes git and adds all the files to git. The files can then be committed and pushed, but you have to create the git repository yourself at Bitbucket."},{"location":"cli/#pull","title":"pull","text":"<p>Syncs content from upstream.</p>"},{"location":"cli/#run","title":"run","text":"<p>Runs a command in container.</p>"},{"location":"cli/#config","title":"config","text":"<p>Set options in config file.</p>"},{"location":"cli/#shell","title":"shell","text":"<p>Opens a shell in the container.</p>"},{"location":"cli/#status","title":"status","text":"<p>Attach to the logs of all containers</p>"},{"location":"cli/#start","title":"start","text":"<p>Installs composer and npm dependencies, starts container and gulp.</p>"},{"location":"cli/#stop","title":"stop","text":""},{"location":"cli/#update","title":"update","text":"<p>Updates project. If the target is 'self' this script updates itself.</p>"},{"location":"composer/","title":"Composer","text":"<p>Composer is a package manager for PHP packages, and can be used to install WP plugins as well as libraries needed for JCORE\u00ae. Composer is used in different degrees in different projects. Sometimes it is only used to install Timber and ACF, and sometimes to manage all plugins in the project.</p>"},{"location":"composer/#plugins-packages-required-in-jcore-the-starter-set","title":"Plugins &amp; Packages required in JCORe (the starter set)","text":"<p>Plugins that are always part of the JCOre base setup and what they do. The list will in most cases be extended on a project basis.</p> <pre><code>\"timber/timber\":\n</code></pre> <p>Drives the whole twig-theme template structure</p> <pre><code>\"jco/advanced-custom-fields-pro\":\n</code></pre> <p>Adds the custom fields (to block and theme)</p> <pre><code>\"jco/wp-migrate-db-pro\":\n</code></pre> <p>WP db migration plugin. Can be used in publication for database changes.</p> <pre><code>\"wpackagist-plugin/better-search-replace\":  \n</code></pre> <p>A  lighter option for database changes than wp-migrate-db-pro.</p> <pre><code>\"sentry/sentry\": \n</code></pre> <p>Sentry is a crash reporting platform that provides you with real-time insight into production deployments with info to reproduce and fix crashes.</p> <pre><code>\"symfony/http-client\": \n</code></pre> <p>Standalone PHP library providing a specific feature, which can be used in any PHP application.</p> <pre><code>\"wpackagist-plugin/wordpress-seo\": \n</code></pre> <p>YOAST -for seo and social media</p> <pre><code>\"nyholm/psr7\": \n</code></pre> <p>A fast PHP7 implementation of PSR-7. Required by symfony.</p> <pre><code>\"wpackagist-plugin/wp-bootstrap-blocks\":  \n</code></pre> <p>Adds functioning columns with media queries. (Do not use the columns-block native to G-berg. Responsivity is lacking, or add media queries yourself. )</p> <pre><code>\"wpackagist-plugin/redirection\":  \n</code></pre> <p>To redirect urls from the WP backend.</p> <pre><code>\"jco/minimal-coming-soon-maintenance-mode\":  \n</code></pre> <p>Plugin for coming soon pages.</p> <pre><code>\"jco/webtoffee-gdpr-cookie-consent\":  \n</code></pre> <p>Webtoffee gdpr popup</p> <pre><code>\"jco/gravityforms\": \n</code></pre> <p>For form handling.</p> <pre><code>\"jco/polylang-pro\":  \n</code></pre> <p>For multilingual sites.</p> <pre><code>\"wpackagist-plugin/mailgun\":  \n</code></pre> <p>An email automation engine for configuration and routing.</p>"},{"location":"composer/#development-plugins-packages","title":"Development Plugins &amp; Packages","text":"<p>These plugins are only in use in development environment via <code>require-dev</code> in composer.</p> <pre><code>\"wpackagist-plugin/pattern-manager\":\n</code></pre> <p>Easily create and manage block patterns in the backend that are automatically saved as php.</p> <pre><code>\"wpackagist-plugin/loco-translate\":\n</code></pre> <p>Create string translations locally for pushing to git.</p> <pre><code>\"squizlabs/php_codesniffer\": \"^3.7\",\n\"dealerdirect/phpcodesniffer-composer-installer\": \"^1.0\",\n\"wp-coding-standards/wpcs\": \"dev-develop\",\n</code></pre> <p>These three packages are used for setting up WordPress Coding Standards for PHP_CodeSniffer in the project.</p>"},{"location":"composer/#languages-and-tranlations","title":"Languages and tranlations","text":"<p>JCOre adds loco translate locally, and the theme/languages -folder contians a jcore.pot -file. The projects \"small words\" are translated for ex on a Swedish site in development, and the plugin should not be added to composer. Translations are pushed with the project.</p> <pre><code>\"wpackagist-plugin/loco-translate\":\n</code></pre> <p>-Only move to require from require-dev in composer if the CUSTOMER him/herself needs access and does translations themselves. -Then locotranslate needs to be added to composer, activated and a CUSTOM translation added on live, for it not to be overwritten by push. </p>"},{"location":"composer_plugin/","title":"Plugin handling with Composer","text":"<p>Composer documentation</p> <p>CLI documentation</p>"},{"location":"composer_plugin/#when-to-use","title":"When to use","text":"<p>Plugins should be handled by Composer in projects that are complex enough that it is better to lock down plugins to certain versions and not allow installing/updating plugins in the back-end.</p>"},{"location":"composer_plugin/#how-to-use","title":"How to use","text":""},{"location":"composer_plugin/#turning-on-usage-of-composer-plugins-in-project","title":"Turning on usage of composer plugins in project","text":"<p>change <code>PLUGIN_INSTALL=\"remote\"</code> to <code>PLUTIN_INSTALL=\"composer\"</code> and add <code>- wp-content/plugins</code> to <code>source:</code>under the <code>deploy</code>section.</p>"},{"location":"composer_plugin/#turning-off-usage-of-composer-plugins-in-project","title":"Turning off usage of composer plugins in project","text":"<p>change <code>PLUGIN_INSTALL=\"composer\"</code> to <code>PLUTIN_INSTALL=\"remote\"</code> and remove <code>- wp-content/plugins</code> from <code>source:</code>under the <code>deploy</code>section.</p>"},{"location":"composer_plugin/#locking-plugin-installation-in-backend","title":"Locking plugin installation in backend","text":"<p>To lock the installation of plugins from the backend you have to ask WP Engine support to set the constant DISALLOW_FILE_MODS to true in wp-config. php</p>"},{"location":"composer_plugin/#installing","title":"Installing","text":"<p>https://getcomposer.org/doc/03-cli.md#require</p>"},{"location":"composer_plugin/#wordpress-repo","title":"Wordpress repo","text":"<p>Free plugins that are found on the wordpress plugins site can be installed by finding the plugin on the site eg. https://wordpress.org/plugins/wp-google-maps/. To install the plugin you type:</p> <p><code>composer require wpackagist-plugin/wp-google-maps</code></p>"},{"location":"composer_plugin/#jco-repo","title":"JCO repo","text":"<p>Plugins that do not exist on the official plugins site can be installed by installing them to the JCO repo site https://repo.jco.fi/ Activating automatic updates for the plugin is a good idea so that we get a library of the plugin versions.</p> <p>Then you go to settings/satispress</p> <p>There you click Manage Packages and tick the box for the plugin you want to use. All the ticked boxes are available to use so make sure not to untick any plugins unless you are sure they are not in use in any project.</p> <p></p> <p>Once you have ticked the box you can find the plugin in the list to the left. The command you use to install the plugin in composer is the line at the top of the box. In this picture it is <code>jco/wp-migrate-db-pro</code></p> <p></p> <p>The install command is:</p> <p><code>composer require jco/wp-migrate-db-pro</code></p>"},{"location":"composer_plugin/#installing-local-plugins","title":"Installing local plugins","text":"<p>Plugins can be installed locally by adding them to \u201crequire-dev\u201d in composer.json or by adding the \u2013dev flag when running composer require.</p>"},{"location":"composer_plugin/#version-control","title":"Version control","text":"<p>Package versions can be defined in composer.json.</p> <p><code>jco/advanced-custom-fields-pro\": \"^5.10.2\"</code> means it has to be over 5.10.2. <code>jco/advanced-custom-fields-pro\": \"5.10.2\"</code> means exactly version 5.10.2</p>"},{"location":"composer_plugin/#updates","title":"Updates","text":"<p>https://getcomposer.org/doc/03-cli.md#update-u</p> <p>Check for updates with command: <code>composer outdated</code></p> <p>Update specific plugin with <code>composer update \u201cpackage to update\u201d</code> eg. <code>composer update wpackagist-plugin/wp-google-maps</code></p> <p>Update all packages with command: <code>composer update</code></p> <p>Note that major updates will not be installed with update eg. 5.10 will not update to 6 but will update to 5.12. To perform major updates you have to change the first number in composer json</p>"},{"location":"composer_plugin/#removing","title":"Removing","text":"<p>https://getcomposer.org/doc/03-cli.md#remove</p> <p>To remove a plugin run <code>composer remove vendor/package</code> eg. <code>composer remove jco/wp-migrate-db-pro</code></p>"},{"location":"docker/","title":"How the docker workflow works","text":"<p>Docker is not a virtual machine, it\u2019s a container that runs a (usually minimal GNU/linux) system inside, somewhat isolated from the outside world. Having said that, Docker runs in a virtual machine on Windows, because Windows is not compatible with Linux binaries. In our case we use Ubuntu on WSL2. Other distros can be used, but instructions are for Ubuntu.</p> <p>There\u2019s a problem with the Docker volume bind to the Windows file system that means that on Windows all project files, and development workflow should be done inside Ubuntu, or its native file system. The downside to this is added complexity for file access and such, but the upside is that since the workflow is running on Linux, all instructions are identical.</p>"},{"location":"docker/#docker-basics","title":"Docker basics","text":"<p>When debugging problems in docker, it might be important to know a bit about how docker works, from an end-user perspective. This is a very simple explanation and might not be entirely how things work under the hood, but more of how you can think of things.</p>"},{"location":"docker/#images","title":"Images","text":"<p>These are the created images that are downloaded to your machine. They are the same for all projects, and they are read only, in the sense that they only change if a new image is downloaded. They are the base state the containers start from.</p>"},{"location":"docker/#containers","title":"Containers","text":"<p>These are created per project, and they are a \"layer\" on top of the images that keep the \"state\" of the container. They represent a running \"machine\". <code>jcore stop</code> and <code>jcore clean</code> delete project or all containers respectively.</p>"},{"location":"docker/#volumes","title":"Volumes","text":"<p>Volumes are like disks that docker uses to store data on. They are more persistent than containers, and survive reboots of both containers and the host machine.</p>"},{"location":"docker/#bind-folders","title":"Bind folders","text":"<p>These are folders on the host machine that act very similar to volumes. This is in essence what the project files are. You can edit files on the host and have them change in the container. These are mostly tracked by GIT, except for the files in the project <code>.jcore</code> folder.</p>"},{"location":"docker/#the-container-images","title":"The container images","text":"<p>The workflow uses docker compose to control and tie together the docker containers. All this is defined in the docker-compose.yml file in the project root. This is a list of the containers, and what they do:</p>"},{"location":"docker/#wordpress","title":"wordpress","text":"<p>This container is based on the php-fpm container, and is the main container for our workflow. WordPress and all PHP code is run on this container. This container installs WordPress by default, if it\u2019s not already installed. It doesn't have a web server, and is not \u201cvisible\u201d to the host machine, but this is the container that <code>jcore shell</code> command runs a shell on.</p>"},{"location":"docker/#db","title":"db","text":"<p>This container runs the MariaDB database. This one is exposed to wordpress and adminer containers. It contains all the WP database data.</p>"},{"location":"docker/#adminer","title":"adminer","text":"<p>This container runs an (optional) adminer front end to access the db container. It's exposed on port 1080. It doesn't have TLS. Can be accessed with <code>http://127.0.0.1:1080</code>. (all the fields can be filled in with <code>wordpress</code> (username, password, db))</p>"},{"location":"docker/#nginx","title":"nginx","text":"<p>This is the web server container. It accesses file assets directly, and PHP on wordpress via fastCGI on internal port 9000. It also uses a cached proxy that accesses images and such from the upstream server under /wp-content/uploads folder. It serves TLS (https) with certs generated by the tlscerts container.</p>"},{"location":"docker/#tlscerts","title":"tlscerts","text":"<p>This container runs only when docker compose is started and generates TLS certs if they don\u2019t exist. It then exits, as it is no longer needed. But if something is wrong with the web server, this one should be checked for errors, as nginx needs the certs in order to start.</p>"},{"location":"mailhog/","title":"MailHog","text":"<p>MailHog is installed as a separate container and can be accessed through http://localhost:8025 when the project is running.  It is set up to be used if the new <code>JCORE_IS_LOCAL</code> constant is present and true, meaning all emails are rerouted to the MailHog instance and can be inspected there.  No further configuration is needed. Mailgun conflicts with this plugin, so that plugin is by default disabled if the <code>JCORE_IS_LOCAL</code> constant is defined as true.</p>"},{"location":"onboarding/","title":"JCORE\u00ae Onboarding","text":""},{"location":"onboarding/#docker","title":"Docker","text":"<p>Docker is used to run the project on the local development machine. It works a bit differently based on what OS it's running on. It is most native on Linux, since the containers use Linux to run their services. Under Mac it runs in a Linux VM under Apple's Hypervisor Framework, and on Windows it runs under WSL2.</p> <p>More info can be found on the How the docker workflow works page.</p>"},{"location":"onboarding/#composer","title":"Composer","text":"<p>Composer is a package manager for PHP packages, and can be used to install WP plugins as well as libraries needed for JCORE\u00ae. Composer is used in different degrees in different projects. Sometimes it is only used to install Timber and ACF, and sometimes to manage all plugins in the project.</p> <p>More info can be found on the Composer page.</p>"},{"location":"onboarding/#npm-node-esbuild","title":"Npm / Node / Esbuild","text":"<p>JCORE\u00ae uses Esbuild to transpile SCSS and to bundle/transpile Javascript files. It also uses Node for the new CLI tool, and for build scripts. At January 2023, Node LTS 16 is recommended (14 might work).</p>"},{"location":"onboarding/#developer-computer-setup","title":"Developer computer setup","text":"<p>This section tells you how to set up the development environment. There is one section for Windows, one for Linux, one for Mac, especially M1 macs, and one common section.</p>"},{"location":"onboarding/#windows-setup","title":"Windows Setup","text":"<p>This part needs to be done on Windows machines. These steps are unique to the Windows Workflow.</p>"},{"location":"onboarding/#1-install-windows-terminal","title":"1. Install Windows Terminal","text":"<p>This is technically an optional step, but it is very strongly recommended, even if you end up using something else. Windows Terminal is a decent fallback terminal, and so much better than cmd.exe. Install instructions</p>"},{"location":"onboarding/#2-install-wsl2","title":"2. Install WSL2","text":"<p>In most cases this consists of running <code>wsl \u2013install</code> as administrator in Windows Terminal. But there might be more to it, so here are some links:</p> <p>Install Linux on Windows with WSL</p> <p>Manual installation steps for older versions of WSL</p>"},{"location":"onboarding/#3-install-ubuntu-on-wsl2","title":"3. Install Ubuntu on WSL2","text":"<p>This step should probably already be done from the WSL2 step, but I recommend setting Ubuntu as the default option in the terminal, since you will be using it a lot.</p> <p>Also create or copy in your SSH keys to <code>~/.ssh</code> Once you get to a point when the keys are used, in case you get an error saying \u201cWarning:  Unprotected private key file\u201d, have a look at this article</p> <p>You should be able to open the Ubuntu terminal from the start menu in case it doesn't open on its own. Search for Ubuntu and launch it. If the Ubuntu prompt starts in the Windows home directory, just type <code>cd</code> or <code>cd ~</code> to get to your home directory.</p> <p>You can also install some other distribution than Ubuntu. For now Ubuntu is the default, since it's officially supported, but some software like composer are quite old, and node needs to be installed from a third party repository, since the Ubuntu version is many years old, and doesn't work with the scripts used in JCORE\u00ae.</p>"},{"location":"onboarding/#4-install-docker","title":"4. Install Docker","text":"<p>Download and install Docker from here. Docker can\u2019t access your WSL Ubuntu by default, so this needs to be turned on from the settings.</p>"},{"location":"onboarding/#linux-setup","title":"Linux Setup","text":"<p>These steps are unique to the Linux workflow, and are based on Ubuntu, because the rest of the instructions assumes Ubuntu. If you use something else, just adapt them to your distro of choice. You can also add the needed commands here if you wish. Please not that this is only for native Linux, the rest of the WSL install process is found in the common section.</p>"},{"location":"onboarding/#1-install-docker","title":"1. Install Docker","text":"<p>Install docker and docker-compose. Docker compose is built into newer versions of docker, and might not be needed, but leave it out at your own risk. <code>sudo apt install docker docker-compose</code> See to it that you can run docker as your normal user. This is usually done by adding yourself to the docker group. <code>usermod -aG docker $USER</code> It probably needs a re-login to take effect. You can set docker to run at startup with <code>systemctl enable docker</code>.</p>"},{"location":"onboarding/#macos-setup","title":"MacOs Setup","text":"<p>These steps are unique to Mac workflow.</p>"},{"location":"onboarding/#1-install-docker_1","title":"1. Install Docker","text":"<p>Download and install Docker from here. Intel or Apple chip, depending on what you have. You might need to install docker-compose separately.</p>"},{"location":"onboarding/#common-setup","title":"Common Setup","text":"<p>These steps should be more or less the same for all versions. And on Windows these should always be run inside the Ubuntu WSL environment.</p>"},{"location":"onboarding/#1-install-ide","title":"1. Install IDE.","text":"<p>VS Code or PHPStorm or something else, but then you're on your own. PHPStorm can connect to WSL automatically and VSCode needs an extension.</p>"},{"location":"onboarding/#2-install-git-if-not-installed","title":"2. Install Git if not installed.","text":"<p><code>sudo apt install git</code> To avoid confusion, do not install git-bash or other git tools on Windows unless you know you need it outside this workflow, because it will not work for this. Learn Git: Git tutorials</p> <p>Git should not be necessary to install for WSL, this will most likely be preinstalled in WSL Ubuntu.</p>"},{"location":"onboarding/#2-install-prerequisites-for-tooling","title":"2. Install prerequisites for tooling.","text":"<p>There is some software that will be needed for everything to work properly that doesn't really fit into any categories directly. You will have problems with later steps if you skip this.</p> <p>It can be installed with this or similar command: <code>sudo apt install curl php php-mbstring php-xml php-zip php-curl php-xdebug dos2unix unzip</code></p> <p>If you\u2019re on WSL for the first time, run <code>sudo apt-get update</code> before running the above installs.</p>"},{"location":"onboarding/#3-install-nodejs-and-npm","title":"3. Install Node.js and npm.","text":"<p>For WSL, follow these steps</p> <p>But if you're lazy, run these: 1. <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash</code> 2. Restart terminal 3. <code>nvm install --lts</code></p>"},{"location":"onboarding/#4-install-jcore-cli","title":"4. Install JCOre CLI","text":"<p>Follow the instructions in the JCORE CLI documentation. TL;DR is: 1. <code>mkdir ~/bin</code> 2. <code>curl -o ~/bin/jcore https://github.com/JCO-Digital/jcore-cli/releases/latest/download/jcore</code> 3. <code>chmod 755 ~/bin/jcore</code></p>"},{"location":"onboarding/#5-install-composer","title":"5. Install composer.","text":"<p><code>sudo apt install composer</code> for Ubuntu version.</p> <p>or (not both):</p> <p>For WSL, follow the Command-line installation in Docs. If you have trouble running the script, you can download it manually as well with the following commands:</p> <p><code>mkdir -p ~/bin</code></p> <p><code>cd ~/bin</code></p> <p><code>wget -O composer https://getcomposer.org/download/latest-stable/composer.phar</code></p> <p><code>chmod +x composer</code></p>"},{"location":"onboarding/#6-generate-ssh-keys","title":"6. Generate SSH-keys","text":"<p>Keys can be generated with this command:</p> <p><code>ssh-keygen -t ed25519</code></p> <p>These keys should be added to Bitbucket to allow access to git upsteam. They can be added to public keys in Bitwarden if you want.</p> <p>Instructions.</p>"},{"location":"onboarding/#7-browser-certificates","title":"7. Browser certificates","text":"<p>The tlscerts container creates a CA certificate that you should add as trusted to your browser. The container creates project specific keys signed by the CA certificate. The CA certificate is located in <code>~/.config/jcore/ssl</code></p>"},{"location":"onboarding/#8-add-public-ssh-key","title":"8. Add Public SSH-key","text":"<p>Add the public key from <code>~/.config/jcore/ssh</code> to WPEngine. This is used by <code>jcore pull</code> command to fetch live site data to local development environment.</p>"},{"location":"process/","title":"Module development process","text":"<p>Normally the modules are either developed against a customer project, and then pushed to their respective repos. They can alternatively be developed in the dedicated development repo JCORE-Kehitys</p>"},{"location":"process/#module-workflow","title":"Module workflow","text":"<p>Modules main branch should always be push protected, and all changes needs to be done through pull-requests. Commits should be done using Conventional Commit standard. When a pull-request is merged, the version will be bumped according to the commits made. (Refer to the conventional commit page to find out which version number is bumped).</p>"},{"location":"process/#module-dos-donts","title":"Module Do's &amp; Don'ts","text":"<ul> <li>Modules are (and should) always be deployed to packagist.org, for easy installing in other projects.</li> <li>Modules versioning should follow semver, and commits should always follow Conventional Commit standard.<ul> <li>If the module is dependent on JCORE-Ydin, the SemVer major version should match that of the JCORE-Ydin version, however if it is not possible, follow SemVer versioning.</li> </ul> </li> <li>Although modules should follow SemVer, the starting version should always be v3.0.0, as to indicate the work that has been put into them from before JCORE 2.</li> <li>Modules should never be dependant on other modules, except JCORE-Ydin, which modules freely can depend on. (Locking the major version is highly encouraged)</li> <li>Do not require Timber in a module, if Timber is needed, require JCORE-Ydin and use the Timber version installed there.</li> </ul>"},{"location":"process/#theme-development-process","title":"Theme development process","text":"<p>JCORE 3 (Ilme), is best developed using the development repo, as all projects uses a copy of the latest version (branch).  Development should be done on the main branch, and when a new version can be released, a new branch is made from the main branch.</p>"},{"location":"process/#theme-dos-donts","title":"Theme Do's &amp; Don'ts","text":"<ul> <li>If a feature is project specific, do not commit it into the jcore-ilme repository.</li> <li>Do backport bugfixes to older versions, as far back as feasible.</li> </ul>"},{"location":"process/#versioning","title":"Versioning","text":""},{"location":"theme/","title":"JCORE 3 (Ilme) documentation","text":""},{"location":"theme/#jcore-3-ilme-changes-from-jcore-2","title":"JCORE 3 (Ilme) changes from JCORE 2","text":"<ul> <li>SCSS is removed, and PostCSS is used instead, with applicable plugins</li> <li>Building assets is no longer done on a project root level, it is instead done in the theme folder.</li> <li>Parent/Child theme is no longer used, the theme is instead \"copied\" from the selected version (branch).</li> <li>Most \"generic\" features are moved to modules</li> <li>Minimum Timber version updated to Timber v2 (Moved from theme to JCORE-Ydin)</li> </ul>"},{"location":"wp-cli/","title":"Useful WP-CLI commands","text":""},{"location":"wp-cli/#regenerate-all-image-thumbnails","title":"Regenerate all image thumbnails","text":"<p><code>wp post list --post_type=attachment --post_mime_type=image --fields=ID --format=ids | xargs wp media regenerate</code></p>"},{"location":"jcore2/changelog/","title":"Changelog","text":""},{"location":"jcore2/changelog/#fluffycritter","title":"Fluffycritter","text":""},{"location":"jcore2/changelog/#customizer","title":"Customizer","text":""},{"location":"jcore2/changelog/#settings","title":"Settings","text":""},{"location":"jcore2/changelog/#filters","title":"Filters","text":""},{"location":"jcore2/changelog/#navigation","title":"Navigation","text":""},{"location":"jcore2/classes/","title":"Class Autoloading","text":"<p>Classes under the <code>jcore</code> or <code>jcoreBlocks</code> namespaces are autoloaded when used.</p> <p>They are loaded from two different places depending on their namespace.</p>"},{"location":"jcore2/classes/#jcore-namespaced-classes","title":"JCORE\u00ae namespaced classes","text":"<p><code>jcore</code> namespaced classes are loaded from either the child theme folder or the JCORE\u2122 folder:</p> <ul> <li><code>&lt;theme&gt;/classes/class-[classname].php</code></li> <li><code>jcore2/classes/class-[classname].php</code></li> </ul>"},{"location":"jcore2/classes/#jcore-blocks-namespaced-classes","title":"JCORE\u00ae Blocks namespaced classes.","text":"<p><code>jcoreBlocks</code> namespaced classes are loaded from based on an array from the filter: <code>jcore_blocks_folders</code>. The defaults for this filter are:</p> <ul> <li><code>&lt;theme&gt;/blocks/</code></li> <li><code>jcore2/blocks/</code></li> </ul> <p>The class file name should be: <code>class-[classname].php</code></p>"},{"location":"jcore2/javascript/","title":"JavaScript in JCORE\u00ae","text":"<p>The gulp scripts are used to transpile ES6 into javascript that browsers understand, so that means you can freely use ES6 in your scripts. Scripts should be placed in a /js sub-folder in either jcore or in the child-theme. They are then transpiled into /dist/js in their respective folders with the same name. They are minified despite the lack of .min.js, this naming is just to keep the same name. These are transpiled, so non-minified versions wouldn't be very useful either, but they have source maps for debugging.</p>"},{"location":"jcore2/javascript/#scope","title":"Scope","text":"<p>As these scripts are treated as modules, functions are not exposed to the global scope. This means that you can\u2019t call a function from a script with an onclick=\u201dfunctionname\u201d attribute. The preferred method of handling this is to instead bind the event from the script, like so: <code>element.addEventListener('click', () =&gt; {})</code> But if you really need to expose a function to the global scope for some reason, it can be done like this: <code>if (global) global.functionName = functionName;</code></p>"},{"location":"jcore2/javascript/#utility-scripts","title":"Utility scripts","text":""},{"location":"jcore2/javascript/#jcorejs","title":"Jcore.js","text":"<p>This is used for smaller self-contained scripts that are used by JCORE.</p> <ul> <li>Scroll to top functionality</li> <li>Masonry grid functionality</li> </ul>"},{"location":"jcore2/javascript/#menujs","title":"Menu.js","text":"<p>This is a script containing useful utilities, mainly intended for navigation, but they may be used anywhere they fit. These are activated by using \u201cdata\u201d attributes in HTML. It has the following functionality:</p>"},{"location":"jcore2/javascript/#sticky","title":"Sticky","text":"<p>Sticky is mainly meant for fixed navigation that\u2019s not at the top of the page. If you add a data-jsticky=\u201dtrue|spacer|no-spacer\u201d attribute to any element, that element will get a \u201csticky\u201d class as it hits the top of the view. The idea is that the sticky class will make it fixed. If the value is \u201cspacer\u201d or \u201ctrue\u201d, it will also get a spacer that takes the same height as the element to keep the flow intact. The \u201cno-spacer\u201d is meant for transparent navigation that floats on top of content.</p>"},{"location":"jcore2/javascript/#scroll","title":"Scroll","text":"<p>Scroll is meant to be used to create a \u201cpeeking\u201d navigation, that hides on scroll down, shows on scroll up and is fixed at the top of the page. It is activated by using data-jscroll=\u201dtrue\u201d, and adds \u201cscrollTop\u201d, \u201cscrollUp\u201d and \u201cscrollDown\u201d classes to the element when the view is scrolled to the top, scrolling up or scrolling down respectively. There\u2019s a threshold of 50px by default to not make it so jittery. This can be changed by adding for example data-threshold=\u201d75\u201d.</p>"},{"location":"jcore2/javascript/#toggle","title":"Toggle","text":"<p>Toggle can be used to toggle a group of elements. It\u2019s activated by using data-jtoggle=\u201dtargetId1 targetId2\u201d on your toggle button class. When clicking the button it will toggle the class on a off on itself, but also copying that state to all target elements. The target class can be set with data-class=\u201dfoo\u201d, and it defaults to \u201ctoggle\u201d. There is also a timeout function that adds \u201cactivated\u201d when activated, and removes it after the set timeout, and \u201cdeactivated\u201d when the toggle is removed. The timeout can be set with data-timeout=\u201d250\u201d and defaults to 200ms.</p>"},{"location":"jcore2/new_project_setup_III/","title":"JCOre theme base styling","text":"<p>An example of a base style set workflow for a JCOre base project.</p> <p>A more elaborate detailed list of tasks can be found in google docs https://docs.google.com/document/d/1jPw7kSgcva80eQd3EZF-G2tEF2dhRTpEEbCJ5Djn6ac/edit?usp=sharing</p>"},{"location":"jcore2/new_project_setup_III/#mock-up-and-stylesheet","title":"Mock up and stylesheet","text":"<p>Ask for mock up and stylesheet in dev mode and check mock up has grid mode too.</p> <p>If no style sheet is available, do not start working on styles. Look through the whole mock up and stylesheet. Look for the most common colors/styles/theme/rounded corner, and let the most common style be the primary/default/main style. Check that colors are sufficient, as added in the previous step. If not, more colors can be added in functions.php 'jcore_customizer_colors'.</p>"},{"location":"jcore2/new_project_setup_III/#colors","title":"Colors","text":"<p>Theme colors are defined in the WP customizer (backend). You can reference colors in SCSS using bootstarp variables. For example $primary becomes <code>color: var(--bs-primary)</code> and so on.</p> <p>If you need to add more colors to the list you can add new variables to the list: $theme-colors in _colors.scss. These new colors have to be added also to jcore_customizer_colors filter in function.php. Use matching variable names as in the _colors.scss.</p>"},{"location":"jcore2/new_project_setup_III/#fonts","title":"Fonts","text":"<p>If Google fonts, add the sizes that are present in the style sheet and the italics version of these. (Most changes related to fonts can be found in the variables and the typography style sheets).</p> <ul> <li> <p>Insert sizes in variables.scss</p> </li> <li> <p>Decide upon a small and large font size that corresponds to a size needed.</p> </li> <li> <p>Insert heading-sizes in variables.scss</p> </li> <li> <p>Check that the responsive scaling settings if $enable-rfs: true;</p> </li> <li> <p>Make an example, and see how the responsive scaling affects the heading sizing. Adjust with bespoke media queries, if necessary.</p> </li> </ul>"},{"location":"jcore2/new_project_setup_III/#line-height","title":"Line height","text":"<p>Check separately for headings, as the larger the font size, the smaller the spacing needs to be for a good look. Make examples of headings that span several lines.</p>"},{"location":"jcore2/new_project_setup_III/#font-weight","title":"Font weight","text":"<p>Check from mock up, add to typography stylesheet.</p>"},{"location":"jcore2/new_project_setup_III/#letter-spacing","title":"Letter-spacing","text":"<p>Add letter spacing to the typography stylesheet.</p>"},{"location":"jcore2/new_project_setup_III/#margin-bottom","title":"Margin bottom","text":"<p>Set margin bottom for all headings and for the paragraph, not to forget list and link items, in the typography stylesheet. In single.css there are ready set margin-bottom for headings. Unify/remove from single. It is better all base font styling is in the typography stylesheet.</p>"},{"location":"jcore2/new_project_setup_III/#check-container-widths","title":"Check container widths","text":"<p>Check container widths on mock up with the grid visible. Decide on narrow and wide container widths, and adjust grid breakpoints if necessary. Set group paddings to smaller/wider, depending on the general mock up look. -All in variables. Set all paddings and margins with the $spacer unit.</p>"},{"location":"jcore2/new_project_setup_III/#text-links-and-their-colorsbehavior","title":"Text links and their colors/behavior.","text":"<p>Base styles can be found last in variables.scss . Additional styling, like hover effects etc should be added to typography.</p>"},{"location":"jcore2/new_project_setup_III/#buttons-_buttonsscss-will-be-refactored-in-grasshopper-with-a-bespoke-jcore-buttons-block","title":"Buttons (_buttons.scss) will be refactored in grasshopper with a bespoke jcore buttons-block.","text":"<p>Button styling is done both for twig/code use in \u201csimple\u201d form, and Gutenberg use in the \u201cmore complicated form\u201d. For easier styling, different classes can be used for styling in G-berg and theme code. If the same classes are used, the negated btn style is needed.</p> <p>Special link styles are also added as buttons, even if the look is more like a text link with an animated arrow to the right/left. All these are added to the buttons.scss.</p>"},{"location":"jcore2/new_project_setup_III/#list-styling","title":"List styling.","text":"<p>Check that list base styles exist, have margin and decent spacing. If in the stylesheet, add bullet points as in stylesheet. If very special lists exist, add them as blocks with ACF repeater fields. If only the bullet list is present in the stylesheet, also check that the numbered list works \u201cin the same way\u201d, equal inline-start-padding and equal spacing. The inline-start-style can be found in _content.scss</p>"},{"location":"jcore2/new_project_setup_III/#quotes","title":"Quotes.","text":"<p>Styles from stylesheet go into gutenberg.scss, as G-berg uses quote and pullquote. Test these in G-berg. -Come up with your own solution for the pullquote, or blacklist pullquote in functions.php.</p>"},{"location":"jcore2/new_project_setup_III/#responsive-jcore-spacers-first-in-gutenbergscss","title":"Responsive JCOre spacers (first in gutenberg.scss).","text":"<p>Adjust to fit your theme. They work on mobile with the value set in G-berg and on desktop with the media query value.</p>"},{"location":"jcore2/new_project_setup_III/#images","title":"Images.","text":"<p>Border-radius/shadows/layers/spacing in text. Set in G-berg and beware G-berg images come in many divs.. \"figure\", \"img'' etc. Check every image-type inserted and its divs.</p>"},{"location":"jcore2/new_project_setup_III/#box-elements-in-gutenberg","title":"Box-elements in Gutenberg","text":"<p>Check the mock up for boxed content in G-berg. Coloring, border-radius, and add classes as needed to _gutenberg.scss.</p>"},{"location":"jcore2/new_project_setup_III/#site-spanning-backgroundfront-page-background","title":"Site-spanning background/front page background.","text":"<p>Site-spanning background images can be added to the theme in customizer. For special effects/color layers, the layout twig file might need cp to child and modified.</p>"},{"location":"jcore2/new_project_setup_III/#check-the-wp-login-view","title":"Check the WP login view","text":"<p>What color scheme? If no mock up, make reasonable choices! Add to variables: $login-bg, $login-form, $login-color. Button styles might affect the show password eye so make sure to check that it is not broken.</p>"},{"location":"jcore2/new_project_setup_III/#footer","title":"Footer","text":"<p>Special link/list/color styling and widget areas. Social media icons. -It is polite to the person coding the footer, to check how the styling in the footer is different from the general color theme/list/link styles. Possibly make the footer exceptions already at this stage in footer.scss, ex. different list/link styling/coloring. (This because now it is all fresh in mind, and you will know what to overwrite, and how to achieve the new style with least effort. )</p>"},{"location":"jcore2/new_project_setup_III/#assetslogo-svgs","title":"Assets/logo svg's","text":"<p>Check that all assets/logos are available for special styling/imagery/decorative elements.</p>"},{"location":"jcore2/new_project_setup_III/#test","title":"TEST","text":"<p>All typography on a G-berg basic page. Lorem ipsum, all headings, paragraph of text, lists(ul and ol), inline links, buttons and their spacings. Also the responsive behaviors of all these in mobile view/iPAd view. Some variables might need adjusting. It is all right to ask the AD or suggest changes. Nobody's perfect!</p>"},{"location":"jcore2/new_project_setup_III/#document","title":"Document","text":"<p>In Code, WP-ohjeet or Dev-notes the classes needed in G-berg/code to achieve special styling.</p>"},{"location":"jcore2/new_project_setup_III/#core-g-berg-blocks","title":"Core G-berg Blocks","text":"<p>Go through what G-berg base blocks are actually needed in the project, and blacklist the ones that are not allowed/not used in mock up in functions.php according to blacklist_blocks() example. Use your imagination. -What can eff things up -&gt; HIDE it!</p>"},{"location":"jcore2/new_project_setup_III/#patterns-and-reusable-blocks-of-small-parts","title":"Patterns and reusable blocks of \"small parts\"","text":"<p>Make patterns or reusable blocks of difficult styling in G-berg -For ex. special arrow buttons or columns with colored box backgrounds etc. Because these \"small\" things are often forgotten from the technical documentation/planning, maybe here, reflect over this, and add to patterns-task?</p>"},{"location":"jcore2/patterns/","title":"Block Patterns and Templates in JCORE\u00ae","text":""},{"location":"jcore2/patterns/#why-block-patterns","title":"Why Block Patterns?","text":"<p>They let you easily create a complex layout of blocks in a matter of seconds and save it like a template. You can then use these patterns anywhere on the website to recreate repeating sections with minimal effort.</p>"},{"location":"jcore2/patterns/#creating-a-block-pattern","title":"Creating a Block Pattern","text":"<p>Block patterns are created using the plugin Pattern Manager which is included in new JCORE\u00ae projects by default. It adds a Pattern menu item in the backend where you can create new patterns in Gutenberg. It lets you choose the name and category of the pattern you are creating.</p> <p>When saved the pattern can be found in the <code>patterns</code> folder in the root of the enabled theme. It uses the builtin functionality of WordPress to save and load block patterns from that folder.</p> <p>WordPress documentation for this can be found here.</p> <p>An example of the header comment that is generated when using the plugin. Notice the automatically added <code>jcore</code> to the Slug. It automatically adds the loaded text domain.</p> <pre><code>/**\n * Title: Blog Test\n * Slug: jcore/blog-test\n * Description: \n * Categories: hero\n * Keywords: \n * Viewport Width: 1280\n * Block Types: \n * Post Types: post\n * Inserter: true\n */\n</code></pre>"},{"location":"jcore2/patterns/#using-default-block-templates-for-new-posts","title":"Using default block templates for new posts","text":"<p>Creating a block template is useful if a post type should always have a certain look. eg. products in a WooCommerce store. Block templates can be easily created by using a block pattern like in the example below. This code would automatically add the <code>jcore/blog-test</code> block pattern when creating a new post.</p> <pre><code>&lt;?php\nfunction register_blog_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object-&gt;template = array(\n        array( 'jcore/blog-test' ),\n    );\n}\nadd_action( 'init', 'jcore_child\\register_blog_template' );\n</code></pre> <p>WordPress documentation about block templates.</p>"},{"location":"jcore2/php_8_2/","title":"Running Local Wordpress Container in PHP 8.2","text":"<p>The JCORE\u00ae WordPress container now defaults to PHP 8.2 so new projects will run that. If you want to run 8.2 in an existing project run <code>jcore update</code> and set <code>image: 'jcodigi/wordpress:8.2'</code> in docker-compose.yml. Currently Timber has so many deprecation notices (over 2000 per request) that the Deprecation notices had to be turned off. If you want to turn on deprecation notices for testing purposes that is defined in a must-use plugin named debug.php.</p> <p>Change</p> <pre><code>error_reporting( E_ALL &amp; ~E_DEPRECATED &amp; ~E_USER_DEPRECATED );\n</code></pre> <p>to</p> <pre><code>error_reporting( E_ALL );\n</code></pre> <p>to enable deprecation notices.</p>"},{"location":"jcore2/templates/","title":"Twig Templates","text":"<p>The jcore twig templates are located in the 'views' folder in both jcore2 and the project child theme. Templates in the child theme override the templates of the same name in the jcore2 theme.</p>"},{"location":"jcore2/templates/#header-footer","title":"Header &amp; Footer","text":"<p>We now use the WordPress standard of calling <code>get_header();</code> and <code>get_footer();</code> in the PHP templates and not in the twig files. Example from <code>singular.php</code></p> <pre><code>get_header();\nTimber::render( $templates, $context );\nget_footer();\n</code></pre>"},{"location":"jcore2/templates/#the-_base-templates","title":"The _base Templates","text":"<p>Some templates have a version ending in _base. This is so that the child theme template can do a partial override. The _base templates are paired with an extending template of the same name without the _base part that should be empty. In some cases where there are many similar versions, more than one template can extend the _base template.</p> <p>The _base templates should almost never be overridden in the child theme. They don't really serve any purpose on the final level of inheritance. If you need to rewrite the entire template, just rewrite the template without the _base name, and leave out the extends part.</p>"},{"location":"jcore2/templates/#template-folders","title":"Template Folders","text":"<p>The templates are organized into a folder structure to make them easier to find. Generally the root folder contains full templates, and the sub-folders contains partial templates.</p>"},{"location":"jcore2/templates/#root-views-folder","title":"Root views Folder","text":"<p>Contains full templates that are called directly by Timber, and defines the entire page. There are two notable exceptions to the full page rule, the header.twig and footer.twig templates are used by the get_header() and get_footer() functions to preserve maximum compatibility with plugins.</p> <ul> <li>404.twig - The standard page not found template.</li> <li>archive.twig - WP archive template.</li> <li>archive-dynamic.twig - Custom jcore archive loader template for a JS based archive written with Vue.js.</li> <li>author.twig - WP Author page.</li> <li>footer.twig - Template used by standard WP footer.php. This one is just a stub, and probably shouldn't be modified.</li> <li>header.twig - Template used by standard WP header.php. This should probably not be modified. You can add things to the head by adding \"partials/head_custom.twig\".</li> <li>layout.twig - This is the base template for the page layout. Most other templates in the root folder extend this one.</li> <li>page.twig - Template for WP page. Defaults to standard layout with page title removed.</li> <li>password-protected.twig - Template for WP password-protected pages when asking for password.</li> <li>posts.twig - Template for WP posts page. Extends archive.twig by default.</li> <li>search.twig - Template for WP search page.</li> <li>single.twig - Template for WP post single page.</li> <li>single-bbpress.twig - ????</li> <li>single-ld.twig - Template for LearnDash singles.</li> <li>single-tribe.twig - ????</li> <li>template-vue.twig - Page template that loads a Vue.js app.</li> </ul>"},{"location":"jcore2/templates/#blocks-folder","title":"Blocks Folder","text":"<p>Contains the templates for custom Gutenberg blocks.</p>"},{"location":"jcore2/templates/#images-folder","title":"Images Folder","text":"<p>Contains images (inline SVG) or image related templates.</p> <ul> <li>footer-brand.twig - Logo displayed in footer.</li> <li>image.twig - Template for displaying Timber images.</li> <li>navbar-brand.twig - Logo displayed in navbar.</li> </ul>"},{"location":"jcore2/templates/#navigation-folder","title":"Navigation Folder","text":"<p>Contains all templates related to navigational menus. These are all partials, but encompass everything from the entire menu, to single items.</p> <ul> <li>desktop.twig - The desktop menu.</li> <li>item.twig - A generic partial for menu items. Recursively calls itself for submenus.</li> <li>mobile.twig - The mobile menu.</li> <li>scroll-to-top.twig - Scroll to top button.</li> <li>topbar.twig - Top menu that defaults to secondary menu.</li> </ul>"},{"location":"jcore2/templates/#partials-folder","title":"Partials Folder","text":"<p>Contains partial templates that don't fit specifically into any of the other folders.</p> <ul> <li>footer.twig - This is the visible page footer.</li> <li>footer-form.twig - Questioning if this should be there.</li> <li>footer-social.twig - This seems to be only used in a custom block.</li> <li>google-analytics.twig - Google analytics gtag template.</li> <li>google-tag-manager.twig - Google tag manager template.</li> <li>google-tag-manager-noscript.twig - Google tag manager noscript template.</li> <li>pagination.twig - Classic pagination for archive and such.</li> <li>search.twig - Search box template.</li> <li>social-media-share.twig - Social media share links for posts.</li> <li>tease.twig - Article tease template.</li> </ul>"},{"location":"jcore2/templates/#woo-folder","title":"Woo Folder","text":"<p>Contains WooCommerce templates. This folder is a bit of an exception to the rule in the sense that the root woo folder contains full templates, and it has its own structure of sub-folders.</p>"},{"location":"jcore2/whitelisting_of_blocks/","title":"Whitelisting of Gutenberg Core blocks in JCORE\u00ae","text":""},{"location":"jcore2/whitelisting_of_blocks/#why-whitelisting","title":"Why whitelisting?","text":"<p>To control what content the customer/user can add in the Guternberg-editor, JCOre hides by default all Core Guternberg blocks and only shows the ones whitelisted in 'blocks.php'. </p>"},{"location":"jcore2/whitelisting_of_blocks/#a-list-of-the-basic-blocks-and-their-names-whitelisted-for-the-g-berg-ediotor","title":"A list of the basic blocks and their names whitelisted for the G-berg ediotor","text":"<pre><code>$whitelisted_blocks = apply_filters(\n        'jcore_whitelisted_gutenberg_blocks',\n        array(\n            'core/paragraph',\n            'core/heading',\n            'core/list',\n            'core/list-item',\n            'core/image',\n            'core/quote',\n            'core/separator',\n            'core/shortcode',\n            'core/spacer',\n            'core/cover',\n            'core/file',\n            'core/video',\n            'core/table',\n            'core/html',\n            'core/preformatted',\n            'core/button',\n            'core/buttons',\n            'core/group',\n            'core/spacer',\n            'core/block',\n            'wp-bootstrap-blocks/column',\n            'wp-bootstrap-blocks/container',\n            'wp-bootstrap-blocks/row',\n            'gravityforms/form',\n        )\n    );\n</code></pre>"},{"location":"jcore2/whitelisting_of_blocks/#to-add-more-blocks-in-your-child-theme-use-this-filter-in-your-theme-functions-file","title":"To add more blocks in your child theme, use this filter in your theme functions-file:","text":"<pre><code>add_filter(\n    'jcore_whitelisted_gutenberg_blocks',\n    function( $blocks ) {\n        $blocks[] = 'core/post-title';\n        $blocks[] = 'core/post-date';\n        $blocks[] = 'core/pullquote';\n        $blocks[] = 'core/quote';\n        $blocks[] = 'core/media-text';\n        return $blocks;\n    }\n);\n</code></pre>"},{"location":"modules/blocks/","title":"JCORE-Blocks","text":"<p>JCORE Blocks module is the module for all of our ACF Gutenberg blocks. It should only contain ACF Gutenberg Blocks and not pure Gutenberg blocks.</p>"},{"location":"modules/blocks/#installation","title":"Installation","text":"<p>Installation in a project is done using <code>composer</code>.  The module is hosted on Packagist and can be installed with the following command:</p> <pre><code>composer require jcore/blocks\n</code></pre> <p>Follow the module registering process to register the module in the Theme.</p>"},{"location":"modules/ydin/","title":"JCORE-Ydin (Core module)","text":""},{"location":"styling/mixins/","title":"Mixins","text":"<p>Mixins are created using the postcss-mixins plugin.</p>"},{"location":"styling/mixins/#breakpoint-mixins","title":"Breakpoint mixins","text":"<p>There exists breakpoint mixins, they are very similar to the Bootstrap mixins. Breakpoints are defined in <code>theme.json</code> and read and added to the mixin automatically.</p> <p>Example usage:</p> <p>Create a min-width breakpoint</p> <pre><code>@mixin breakpoint-up sm {\n  background-color: red;\n}\n</code></pre> <p>Create a breakpoint between two breakpoints</p> <pre><code>@mixin breakpoint-between sm, md {\n  background-color: red;\n}\n</code></pre>"},{"location":"styling/tailwind/","title":"Tailwind","text":"<p>Ilme uses Tailwind for styling templates, components and partials.</p>"},{"location":"styling/tailwind/#tailwind-config","title":"Tailwind Config","text":"<p>Tailwind is configured from the tailwind.config.js file, which automatically imports e.g. colors from the theme.json file. This means we can, and should use the custom colors added in theme.json in Tailwind classes, e.g. <code>bg-dark</code>.</p>"},{"location":"styling/tailwind/#styling-dos-and-donts","title":"Styling do's and dont's","text":"<p>EITHER AN ELEMENT HAS ONLY TAILWIND CLASSES OR A CSS SELECTOR, NOT BOTH IF AN ELEMENT HAS A CLASS, DO NOT MIX IN TAILWIND, AND IF AN ELEMENT HAS TAILWIND APPLIED, DO NOT ADD A CLASS AND STYLE IT IN CSS</p>"},{"location":"styling/tailwind/#tailwind-dos-and-donts","title":"Tailwind do's and dont's","text":"<ul> <li>Only use @apply if you have some very specific styling issue, when you e.g. want to use the colors, use the WP generated CSS variables instead.</li> <li>If something is very cubersome to do in Tailwind, e.g. pseudo elements, CSS should be used instead.</li> <li>Do use for-loops, multi-cursor editing and split out the file into components, when repeating your styles.</li> <li>If you want to extend tailwind, check first if it is possible to do it in theme.json, otherwise do it in the Tailwind config.</li> <li>If you add something to the theme.json that would be useful in the Tailwind config, do import the theme.json and extend/overwrite Tailwinds default </li> </ul>"},{"location":"styling/theme-json/","title":"Theme.json in Ilme","text":"<p>Ilme uses theme.json for global settings and styles .</p>"},{"location":"styling/theme-json/#themejson-config","title":"Theme.json config","text":"<p>The file is structured into sections, Ilme uses the settings and styles-sections. Pattern styling through theme.json is optional. Ilme as now does not use customTemplates nor templateParts. Observe that theme.json uses versioning, and is updated with newer Wordpress releases. From WP 6.6 on-wards, the theme.json uses v3. When updating Wordpress, check the migration documentation</p> <pre><code>{\n    \"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n    \"version\": 3,\n    \"settings\": {},\n    \"styles\": {},\n    \"customTemplates\": {},\n    \"templateParts\": {},\n    \"patterns\": []\n}\n</code></pre>"},{"location":"styling/theme-json/#theme-settings","title":"Theme settings","text":"<p>The settings that were included in Jcore2 varaibles can now be set in theme.json:</p> <ul> <li>Theme colors (as many as needed)</li> <li>Responsive breakpoints and spacing</li> <li>Page layout dimensions, 2 different, normal and wide content.</li> <li>All typography</li> <li>Blocks: An object for configuring per-core-block settings, like image, pullquote etc.</li> </ul>"},{"location":"styling/theme-json/#theme-styles","title":"Theme styles","text":"<p>The theme styles sets the settings onto the G-berg content:</p> <ul> <li>Text and background color</li> <li>Paragraph font-size and line-height</li> <li>Headings font-size, headings font-family</li> <li>G-berg group padding</li> <li>Link color</li> </ul> <p>The presets (settings) are applied in the styles-section with a special syntax: var:preset|$feature|$slug. So base color in this instance would be var:preset|color|base. For custom color \"success\" use var:custom|color|success.</p>"}]}